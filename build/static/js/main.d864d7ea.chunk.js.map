{"version":3,"sources":["Proxy.ts","EventProducer.ts","TextInput.tsx","Login.tsx","TextInputAndButton.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","args","filter","listener","call","obj","splice","findIndex","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","displayNameInput","React","createRef","alt","src","width","href","onClick","preventDefault","current","ref","sendPacket","staySignedIn","TextInputAndButton","textInput","buttonContent","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListener","LeftPane","user","tag","text","sendContactRequest","map","key","selectedConversation","firstMessage","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","onBack","id","senderId","onSend","referenceTo","contentType","Main","undefined","c","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d864d7ea.chunk.js","sourcesContent":["import { OutgoingPacket, IncomingPacket, InboxDto, MessageDto } from './chat';\nimport { EventProducer } from './EventProducer';\n\ninterface ProxyEventMap {\n    \"login\": () => void;\n    \"message\": ( channelId: string, message: MessageDto ) => void; \n    \"conversation\": ( channelId: string ) => void;\n}\n\nclass Proxy extends EventProducer<ProxyEventMap> {\n    private ws: WebSocket;\n    \n    public sendPacket( packet: OutgoingPacket ) {\n        this.ws.send( JSON.stringify( packet ) ); \n    }\n\n    inbox: InboxDto | null = null;\n    \n    constructor() {\n        super();\n        this.ws = new WebSocket( \"wss://raja.aut.bme.hu/chat/\" );\n        this.ws.addEventListener( \"open\", () => {} );\n        this.ws.addEventListener( \"message\", e => \n        {\n            let p = JSON.parse( e.data ) as IncomingPacket;\n            switch ( p.type )\n            {\n                case \"error\":\n                    alert( p.message );\n                    break;\n\n                case \"login\":\n                    this.inbox = p.inbox;\n                    this.dispatch( \"login\" );\n                    break;\n            \n                case \"message\":\n                    let cid = p.channelId;\n                    this.inbox!.conversations.find( x => x.channelId === cid )?.lastMessages.push( p.message );\n                    this.dispatch( \"message\", cid, p.message );\n                    break;\n            \n                case \"conversationAdded\":\n                    this.inbox!.conversations.push( p.conversation );\n                    this.dispatch( \"conversation\", p.conversation.channelId );\n                    break;\n            } \n        } );\n    }\n}\n    \nexport var proxy = new Proxy();","export class EventProducer<M> {\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\n\n    protected dispatch<K extends keyof M>( type: K, ...args ) {\n        for ( let listener of this.listeners.filter( x => x.type === type ) ) \n            listener.listener.call( listener.obj, ...args );\n        }\n    \n    addEventListener<K extends keyof M>( type: K, listener: M[ K ], obj?: Object ) {\n        this.listeners.push( { type, listener, obj } ); \n    }\n\n    removeEventListener<K extends keyof M>( type: K, listener: M[ K ], obj?: Object ) {\n        this.listeners.splice( this.listeners.findIndex( x => x.type === type && x.listener === listener ), 1 ); \n    }\n\n    removeAllEventListener(obj?: Object ) {\n        if ( !obj )\n            throw new Error( \"Must specify object\" );\n            this.listeners = this.listeners.filter( x => x.obj !== obj ); \n    }\n}","import { Component } from \"react\";\nimport React from \"react\";\nimport './TextInput.css'\n\nexport interface TextInputOptions {\n    value?: string;\n    onChange?: ( value: string ) => void; \n    type?: \"text\" | \"password\" | \"email\"; \n    placeholder?: string;\n    onEnter?: () => void;\n    autofocus?: boolean;\n};\n\nexport class TextInput extends Component<TextInputOptions> {\n    state = { value: this.props.value, focus: false };\n    render() {\n        let attrs = {} as any;\n        if ( this.props.autofocus ) attrs.autoFocus = true;\n        if ( this.props.onEnter ) attrs.onKeyDown = e => {\n            if ( e.keyCode === 13 ) this.props.onEnter!();\n        };\n        return (\n            <div className=\"text-input\">\n                <input {...attrs} type={ this.props.type ?? \"text\" } value={ this.state.value } \n                    onChange={ e =>\n                    {\n                        this.setState( { value: e.target.value } );\n                        this.props.onChange?.( e.target.value ); \n                    }}\n                    onBlur={ () => this.setState( { focus: false } ) }\n                    onFocus={ () => this.setState( { focus: true } ) } />\n                <div className=\"focus-indicator\"></div>\n                <label className={ this.state.value || this.state.focus ? \"subsided\" : \"\" }>\n                    { this.props.placeholder }\n                </label>\n            </div> );\n    }\n}","import React, { Component } from 'react';\nimport { proxy } from './Proxy';\nimport { TextInput } from './TextInput';\n\nexport class Login extends Component {\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\n    displayNameInput = React.createRef<TextInput>();\n    render() {\n        return (\n            <div className=\"login\">\n            <img alt=\"logo\" src=\"logo512.png\" width=\"256\" />\n            <p>\n                { this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \" }\n                <a href=\"\" onClick={ e => { e.preventDefault(); this.setState( { register: !this.state.register } ); } }>\n                { this.state.register ? \"Login\" : \"Register\" } </a>\n            </p>\n            <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={ this.state.email } onChange={ e => \n                {\n                    if (e === 'prt14l' || e === 'PRT14L') this.displayNameInput.current?.setState( { value: \"Daniel\" } );\n                    this.setState( { email: e } );\n                }}\n                onEnter={ () => this.onClick() } autofocus={ true }\n            />\n            <TextInput type=\"password\" placeholder=\"Password\" value={ this.state.password } onChange={ e => this.setState( { password: e } ) } onEnter={ () => this.onClick() } autofocus={ false } />\n            {\n                this.state.register &&\n                <TextInput ref={ this.displayNameInput } type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={ this.state.displayName } onChange={ e => this.setState( { displayName: e } ) } onEnter={ () => this.onClick() } autofocus={ false } />\n            }\n            <button type=\"button\" onClick={ () => this.onClick() }> { this.state.register ? \"Register\" : \"Login\" } </button>\n            <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\n            </div> ); \n    }\n    onClick() {\n        if ( this.state.register )\n            proxy.sendPacket( { type: \"register\", email: this.state.email, password: this.state.password, displayName: this.state.displayName, staySignedIn: false } );\n        else\n            proxy.sendPacket( { type: \"login\", email: this.state.email, password: this.state.password, staySignedIn: false } );\n    }\n}","import { TextInputOptions, TextInput } from \"./TextInput\";\nimport { Component } from \"react\";\nimport React from \"react\";\n\nexport interface TextInputAndButtonOptions extends TextInputOptions {\n    buttonContent?: string;\n    onClick?: (text: string) => boolean | void;\n}\n\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions> {\n    textInput = React.createRef<TextInput>();\n    onClick() {\n        if ( this.props.onClick?.( this.textInput.current?.state.value ?? \"\" ) ) \n            this.textInput.current?.setState( { value: \"\" } );\n    }\n    render() {\n        return (\n            <div className=\"text-input-and-button\">\n                <TextInput {...this.props} ref={ this.textInput } onEnter={() => this.onClick()} /> \n                <button type=\"button\" onClick={() => this.onClick()}>\n                    {this.props.buttonContent} \n                </button>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { ConversationDto } from \"./chat\";\nimport { proxy } from \"./Proxy\";\n\nexport class ConversationCard extends Component<{\n    conversation: ConversationDto,\n    selected: boolean,\n    onSelect: () => void\n}> {\n    render() {\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ? this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\n        return (\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\n                onClick={() => this.props.onSelect()}> \n                <div className=\"row\">\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\n                    <span className=\"time\">\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString()}\n                    </span>\n                </div>\n                <span className=\"last-message\">{lastMessage?.content}</span>\n            </div>\n        );\n    }\n    componentDidMount() {\n        proxy.addEventListener( \"message\", ( cid, m ) => \n        {\n        if ( cid === this.props.conversation.channelId )\n            this.forceUpdate();\n        }, this ); \n    }\n        componentWillUnmount() {\n        proxy.removeAllEventListener( this ); \n    }\n}","import { Component } from \"react\";\nimport { ConversationDto, InboxDto } from \"./chat\";\nimport React from \"react\";\nimport { TextInputAndButton } from \"./TextInputAndButton\";\nimport { proxy } from \"./Proxy\";\nimport { ConversationCard } from \"./ConversationCard\";\n\nexport class LeftPane extends Component<{\n    inbox: InboxDto,\n    selectedConversation: ConversationDto | undefined, \n    onSelect: (c: ConversationDto) => void\n}> {\n    render() {\n        return (\n            <div className=\"left-pane\">\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\n                    buttonContent=\"Inv\"\n                    onClick={text => this.sendContactRequest(text)} />\n                <div className=\"conversations\">\n                    {this.props.inbox.conversations.map(x => \n                        <ConversationCard\n                        key={x.channelId}\n                        conversation={x}\n                        selected={x === this.props.selectedConversation} \n                        onSelect={() => this.props.onSelect(x)} />)}\n                </div>\n            </div>\n        );\n    }\n    sendContactRequest( email: string ) {\n        proxy.sendPacket( { type: \"contactRequest\", email, firstMessage: \"Hello\" } );\n        return true; \n    }\n    componentDidMount() {\n        proxy.addEventListener( \"conversation\", () => this.forceUpdate(), this ); \n    }\n        \n    componentWillUnmount() {\n        proxy.removeAllEventListener( this ); \n    }\n}","import React, { PureComponent } from \"react\";\nimport { MessageDto } from \"./chat\";\n\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }> {\n    render() {\n        return (\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\n                <div className=\"bubble\">\n                    <span className=\"text\">{this.props.message.content}</span>\n                    <span className=\"time\">{new Date(this.props.message.timeStamp).toLocaleTimeString()}</span>\n                </div> \n            </div>\n        );\n    }\n}","import { Component } from \"react\";\nimport { ConversationDto } from \"./chat\";\nimport { proxy } from \"./Proxy\";\nimport React from \"react\";\nimport { TextInputAndButton } from \"./TextInputAndButton\";\nimport { MessageCard } from \"./MessageCard\";\n\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }> {\n    render() {\n        return (\n            <div className=\"right-pane column\">\n                {this.props.conversation && \n                    <>\n                        <div className=\"conversation-header row\"> \n                            <button type=\"button\" className=\"only-narrow\"\n                                onClick={ () => this.props.onBack() }>Back</button> \n                            <p>{ this.props.conversation?.name }</p>\n                        </div>\n                        <div className=\"messages\">\n                            {this.props.conversation?.lastMessages.map(x => \n                                <MessageCard key={x.id} message={x} own={x.senderId === proxy.inbox?.user.id} />)}\n                        </div>\n                        <div className=\"send-message row\">\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\" buttonContent=\"Send\" onClick={x => this.onSend(x)} /> \n                        </div>\n                    </>\n                }\n            </div>\n        );\n    }\n    componentDidMount() {\n        proxy.addEventListener(\"message\", (cid, m) => {\n            if (cid === this.props.conversation?.channelId) this.forceUpdate();\n        }, this);\n    }\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n    onSend(text: string) {\n        proxy.sendPacket({ type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: \"P: \" + text });\n        return true;\n    }\n}","import { Component } from \"react\";\nimport React from \"react\";\nimport { ConversationDto } from \"./chat\";\nimport { proxy } from \"./Proxy\";\nimport { LeftPane } from \"./LeftPane\";\nimport { RightPane } from \"./RightPane\";\n\n\nexport class Main extends Component {\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\n    render() {\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\n        return (\n            <div className={className}>\n                <LeftPane inbox={proxy.inbox!} selectedConversation={this.state.selectedConversation} onSelect={c => this.setState({ selectedConversation: c })} />\n                <RightPane conversation={this.state.selectedConversation} onBack={() => this.setState({ selectedConversation: undefined })} />\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Login } from './Login'\nimport './App.css';\nimport { Main } from './Main';\nimport { proxy } from './Proxy';\n\nexport default class App extends Component {\n  render() {\n    if (proxy.inbox != null) {\n      return (<div className=\"app\"><Main /></div>); \n    }\n    else {\n      return (<div className=\"app\"><Login /></div>); \n    }\n  }\n  componentDidMount() {\n    proxy.addEventListener( \"login\", () => this.forceUpdate(), this ); \n  }\n  componentWillUnmount() {\n      proxy.removeAllEventListener( this ); \n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}